extends layout.pug

block content
    .main
        .header
            h1.app-title.fancy-font Shopping lists API
            span.greeting Hello, #{username}!
            a.logout(href='/logout') Logout


        .vertical-center
            h1.fancy-font Your Shopping lists
            .content
                form#newList(autocomplete='off')
                    input#name(type='text', name='name', placeholder='Enter name for new shopping list..')
                    button(type='submit') New List

                ul#shopping-lists
                    each list in lists
                        li 
                            span.name #{list.name}
                            span.items (#{list.items.length} Items)
                            span.id ID: #{list._id}
                            span.delete(onclick="remove('" + list._id +"')")
                                i(class="far fa-trash-alt")
        .vertical-center.api-docs
            h2.fancy-font API Key

            .api-route
                p The API Key can be used to create, delete and list all shopping lists of the user. It has to be send in the <code>Authorization</code> HTTP Header. Do not share your API Key with others.

            div.api-key-container
                span 
                    b #{ apiKey || 'Generate your API Key →' }
                form#apiKey(autocomplete='off' onsubmit='updateApiKey()')
                    button(type='submit') Generate new API Key

        .vertical-center.api-docs
            h2.fancy-font API Documentation
            
            .api-route
                p The <b>Shopping lists API</b> provides two kinds of endpoints.
                h5 Private Endpoints
                p <i>Private endpoints</i> need authentication via a Cookie and therefore can only be called from within this <b>administration application.</b> Private endpoints are used to <b>list</b> all lists of the authenticated user as well as <b>create</b> and <b>delete</b> lists.
                h5 Public Endpoints
                p <i>Public endpoints</i> only rely on the <b>lists ID</b>. Everyone who knows a <b>lists ID</b> can get and modify the list items.
                p(style="margin-top: 2rem") With this separation you can share access to shopping lists with other people and they do not need to create an account to access it. Only if they want to create their own lists and share them, they need to register at the <span class="fancy-font">Shopping lists API</span>.

            .api-route
                h3.fancy-font Get a list
                <code class="colored">GET /api/v1/lists/&lt;listid&gt;</code>

                h5 returns the list
                pre
                    code.colored.
                        {
                            "_id": "&lt;listid&gt;",
                            "userId": "&lt;userid&gt;",
                            "name": "Einkaufen gehen",
                            "items": [
                                {
                                    "bought": true,
                                    "_id": "&lt;imteid&gt;",
                                    "name": "Bananen"
                                },
                                {
                                    "bought": false,
                                    "_id": "&lt;imteid&gt;",
                                    "name": "Äpfel"
                                }
                            ]
                        }   
                        
            .api-route
                h3.fancy-font Add item to list
                pre
                    code.colored
                        |POST /api/v1/lists/&lt;listid&gt;/items
                        |Content-Type: application/json
                        |
                        |{ "name": "" }
                        
                h5 returns the updated list (see above)
            .api-route
                h3.fancy-font Remove item from list
                <code class="colored">DELETE /api/v1/lists/&lt;listid&gt;/items/&lt;itemid&gt;</code>
                h5 returns the updated list (see above)
            .api-route
                h3.fancy-font Update item in list
                pre
                    code.colored
                        |PUT /api/v1/lists/&lt;listid&gt;/items/&lt;itemid&gt;
                        |Content-Type: application/json
                        |
                        |{ "bought": true }

                h5 returns the updated list (see above)
            .api-route
                h3.fancy-font (private) Get all lists (of authenticated user)
                pre
                    code.colored
                        |GET /api/v1/lists
                        |Authorization &lt;API Key&gt;

                h5 returns an array of lists (see above)
            .api-route
                h3.fancy-font (private) Create new list
                pre
                    code.colored
                        |POST /api/v1/lists
                        |Authorization: &lt;API Key&gt;
                        |Content-Type: application/json
                        |
                        |{ "name": "" }

                h5 returns the created list (see above)
            .api-route
                h3.fancy-font (private) Delete list
                pre
                    code.colored
                        |DELETE /api/v1/lists/&lt;listid&gt;
                        |Authorization: &lt;API Key&gt;

block scripts
    script.
        document.getElementById("newList").onsubmit = function(event) {
            event.preventDefault();
            const params = new URLSearchParams([...new FormData(event.target).entries()]);
            fetch("/api/v1/lists/", { method:"POST", body: params }).then(response => {
                location.reload();
            });
        }
        function remove(id) {
            return fetch("/api/v1/lists/" + id, { method: 'DELETE' }).then(response => {
                location.reload();
            });
        }
        function updateApiKey() {
            return fetch("/updateApiKey", { method: 'POST' })
                .then(response => {
                    location.reload();
                });
        }
